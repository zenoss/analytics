#
# This filter should be used for zeneventserver logs.
#

# new lines start with a date
multiline {
    pattern => "^\s|[A-Za-z]"
    what => "previous"
}

grok {
    break_on_match => true

    # Matches lines of the form: 2013-10-31T06:52:44.215 [INDEXER_EVENT_SUMMARY] ERROR org.springframework.transaction.interceptor.TransactionInterceptor - Application exception overridden by rollback exception
    #
    # Note that a specialized form of the USERNAME pattern is used to capture 'logger' since java logger may include "/" and "$"
    # TODO: when we upgrade to a later version of grok, we could use something like this instead:
    #    pattern_definitions => { "JAVA_LOGGER",  "[a-zA-Z0-9._\$\-\/]+" }
    #    match => [ "message", "...%{JAVA_LOGGER:logger}..."]
    #
    match => [ "message", "%{TIMESTAMP_ISO8601:datetime} \[%{GREEDYDATA:thread}\] %{LOGLEVEL:loglevel}%{SPACE}(?<logger>[a-zA-Z0-9._\$\-\/]+) - %{GREEDYDATA:message}"]

    # The following catches messages from some of the jars in zeneventserver which log with a slightly different format
    match => [ "message", "%{TIMESTAMP_ISO8601:datetime}\:%{LOGLEVEL:loglevel}\:(?<logger>[a-zA-Z0-9._\$\-\/]+)\:%{GREEDYDATA:message}"]

    # An alternate match for debugging scenarios where Maven started the app
    match => [ "message", "\[%{LOGLEVEL:loglevel}\] %{GREEDYDATA:message}"]
}

mutate {
    # remove literal 'T' from datetime to make parsing in the next step easier
    gsub => [ "datetime", "T", " " ]
}

# This filter parses the datetime field into a time value,
# removes the datetime field from the data, and
# then uses the parsed value as the "@timestamp" for the message.
date {
    match => [ "datetime", "yyyy-MM-dd HH:mm:ss.SSS" ]
    remove_field => ["datetime"]
}
