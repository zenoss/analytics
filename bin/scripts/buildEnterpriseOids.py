#!/usr/bin/env python
##############################################################################
# 
# Copyright (C) Zenoss, Inc. 2007, all rights reserved.
# 
# This content is made available according to terms specified in
# License.zenoss under the directory where your Zenoss product is installed.
# 
##############################################################################


import os
import sys
import urllib2
import re
import unicodedata
import base64
import zlib
from datetime import datetime

IANA_URL = "http://www.iana.org/assignments/enterprise-numbers"
IANA_PREFIX = ".1.3.6.1.4.1"
HEADER_STRING = """\
# EnterpriseOIDs.py
#
# This module was dynamically generated by the buildEnterpriseOids.py script.
# The data is obtained from http://www.iana.org/assignments/enterprise-numbers
#
# Generated: %s
""" % datetime.now()

# set this to False if you want to generate human-readable (but slower to
# import) Python code
write_encoded = True

def generate_oid_defn_dict(iana_source):
    oid_var_defn = []
    oid_var_defn.append("EnterpriseOIDs = {")

    iana_source_iter = iter(iana_source.splitlines())
    for line in iana_source_iter:
        if line.isdigit() and line != "0":
            key = line
            line = iana_source_iter.next().strip()
        else:
            continue

        # Convert unicode strings to ascii .. dropping unicode chars ...
        uline = unicode(line.decode('iso-8859-1','ignore'))
        val = unicodedata.normalize('NFKD', uline).encode('ascii','ignore')

        # Strip control characters.
        val = re.sub(r"[^\w!.,<>@#$%^&*\/()]", " ", val)

        val = val.strip()
        if val:
            # Escape single and double quotes.
            val = val.replace('"', '\\"').replace("'", "\\'")

            # Add dict item
            oid_var_defn.append(" '%s.%s':'%s'," % (IANA_PREFIX, key, val))

    oid_var_defn.append(" }")

    return '\n'.join(oid_var_defn) + '\n'


def main():
    # Attempt to download the latest enterprise assignments from IANA.
    try:
        instream = urllib2.urlopen(IANA_URL)
        iana_content = instream.read()
        instream.close()
    except IOError:
        print "Unable to retrieve OIDs from IANA."
        print "  - %s" % IANA_URL
        sys.exit(1)

    # Open the dynamically generated module.
    filename=os.path.join(os.environ['ZENHOME'],
        "Products/DataCollector/EnterpriseOIDs.py")
    
    fo = open(filename, "wb")
    fo.write(HEADER_STRING)

    # extract oid->enterprise dict from IANA page
    dict_exec_string = generate_oid_defn_dict(iana_content)

    if write_encoded:
        # convert oid defn string to compressed b64
        fo.write('import base64, zlib\n')
        fo.write('oid_encoded_data = """\n')
        fo.write(base64.encodestring(zlib.compress(dict_exec_string)))
        fo.write('"""\n')
        fo.write('exec(zlib.decompress(base64.decodestring(oid_encoded_data)))\n')
    else:
        fo.write(dict_exec_string)

    fo.close()

    print "IANA enterprise OID mappings written to module."
    print "  %s" % filename


if __name__ == "__main__":

    # Bail out if ZENHOME is not set.
    if 'ZENHOME' not in os.environ:
        print "ZENHOME is not set. Run this command as the zenoss user."
        sys.exit(1)

    main()
